from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import json
import base64
import torch
from PIL import Image
from io import BytesIO
import logging
import os

# Logging setup
logging.basicConfig(level=logging.DEBUG)

# Model setup
from diffusers import StableDiffusionImg2ImgPipeline

device = "cuda"
model_id_or_path = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(model_id_or_path, torch_dtype=torch.float16)
pipe = pipe.to(device)

# Flask setup
app = Flask(__name__, static_folder='saved_images')
CORS(app)

IMAGE_FOLDER = 'saved_images'
SKETCH_FOLDER = os.path.join(IMAGE_FOLDER, 'sketches')
GENERATED_FOLDER = os.path.join(IMAGE_FOLDER, 'generated')
if not os.path.exists(SKETCH_FOLDER):
    os.makedirs(SKETCH_FOLDER)
if not os.path.exists(GENERATED_FOLDER):
    os.makedirs(GENERATED_FOLDER)

with open('data.json', 'r') as file:
    data = json.load(file)

@app.route('/data', methods=['GET'])
def get_data():
    return jsonify(data)

@app.route('/image', methods=['POST'])
def receive_image():
    try:
        data = request.json
        image_data = data['image'].split(',')[1]
        prompt = data['prompt']
        image_bytes = BytesIO(base64.b64decode(image_data))
        init_image = Image.open(image_bytes).convert("RGBA")
        init_image = init_image.resize((768, 512))
        white_background = Image.new("RGB", init_image.size, (255, 255, 255))
        white_background.paste(init_image, mask=init_image.split()[3])
        images = pipe(prompt=prompt, image=white_background, strength=0.75, guidance_scale=7.5).images

        if not images or len(images) == 0:
            raise ValueError("No images generated by the model")

        # Save the generated image
        image_filename = os.path.join(GENERATED_FOLDER, f"image_{len(os.listdir(GENERATED_FOLDER)) + 1}.png")
        images[0].save(image_filename)

        # Save the sketch image
        sketch_filename = os.path.join(SKETCH_FOLDER, f"sketch_{len(os.listdir(SKETCH_FOLDER)) + 1}.png")
        white_background.save(sketch_filename)
        
        img_byte_array = BytesIO()
        images[0].save(img_byte_array, format="PNG")
        img_base64 = base64.b64encode(img_byte_array.getvalue()).decode()

        return jsonify({'message': 'Image processed successfully!', 'imageBase64': f"data:image/png;base64,{img_base64}"})

    except Exception as e:
        logging.error(f"Error while processing image: {e}")
        return jsonify({'message': f'Error: {str(e)}'}), 500

@app.route('/saved-images', methods=['GET'])
def get_saved_images():
    sketches = [os.path.join('sketches', f) for f in os.listdir(SKETCH_FOLDER) if f.endswith('.png')]
    generated = [os.path.join('generated', f) for f in os.listdir(GENERATED_FOLDER) if f.endswith('.png')]
    return jsonify({'sketches': sketches, 'generated': generated})

@app.route('/saved_images/<path:filename>', methods=['GET'])
def serve_image(filename):
    return send_from_directory(IMAGE_FOLDER, filename)

if __name__ == "__main__":
    app.run(debug=True)
